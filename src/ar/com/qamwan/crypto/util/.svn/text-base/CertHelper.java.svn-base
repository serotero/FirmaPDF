package ar.com.cajval.sba.crypto.util;

import java.math.BigInteger;
import java.util.Arrays;
public class CertHelper {
	
	private CertHelper(){}
	
	public static String getSerialNumberAsString(BigInteger serialNumber){
		
		String certNumber = serialNumber.toString(16).toUpperCase();
		//agregar ceros adelante
		String allZero ="0000000000000000";
		if (certNumber.length()<16){
			certNumber = allZero.substring(0, 16-certNumber.length()) + certNumber;
		}
		return certNumber;
	}
	
	/**
	 * Compare two DN String for equality without order 
	 * ej: C=AR, O=CVSA, CN=ACDemo
	 * with CN=ACDemo, O=CVSA, C=AR
	 * are the same with diferent order (this return true)
	 * 
	 * @param dnOne a String containing a DN
	 * @param dnTwo a String containing a DN
	 * @return boolean
	 */
	public static boolean areSameDN(String dnOne, String dnTwo){
		boolean areSame = false;
		if(dnOne!=null && dnTwo!=null){
			String[] dnPartsOne = dnOne.split(",");
			String[] dnPartsTwo = dnTwo.split(",");
			if(dnPartsOne.length == dnPartsTwo.length){
				boolean[] partEquals = new boolean[dnPartsTwo.length];
				boolean[] allTrue = new boolean[dnPartsTwo.length];
				Arrays.fill(partEquals,false);
				Arrays.fill(allTrue,true);
				for(int i=0;i<dnPartsOne.length;i++){
					for(int s=0;s<dnPartsTwo.length;s++){
						if(dnPartsOne[i].trim().equals(dnPartsTwo[s].trim())){
							partEquals[i] = true;
						}
					}
				}
				if(Arrays.equals(partEquals, allTrue)){
					areSame = true;
				}
			}
		}
		return areSame;
		
	}
	
}
